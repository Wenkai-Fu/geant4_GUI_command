# create an OpenGL view:
/vis/open OGL

# disable auto refresh and quieten vis messages whilst scene and
# trajectories are established:
/vis/viewer/set/autoRefresh true
/vis/verbose errors

# draw geometry:
/vis/drawVolume

# geometry visibility
# /vis/geometry/set/visibility logical_volume_name depth visibility

# geometry color
# /vis/geometry/set/colour lv_name depth red green blue (opacity)

# list all logical volumes
# /vis/geometry/list

# view angle
# /vis/viewer/set/viewpointThetaPhi 70 20
# /vis/viewer/set/viewpointVector [x] [y] [z]

# set upVector
# /vis/viewer/set/upVector [x] [y] [z]

# drawing style
# /vis/viewer/set/style w or s
# w: wireframe
# s: surface

# pan to specific coordinate
# /vis/viewer/panTo [right] [up] [unit]
# /vis/viewer/pan [right] [up] [unit]

# zoom 
# /vis/viewer/zoomTo 4.
# /vis/viewer/zoom [multiplier]

# save figure
/vis/ogl/set/printMode pixmap
/vis/ogl/set/printSize -1 -1

# /vis/ogl/export name
# /vis/ogl/printEPS

# Eps file can be converted to pdf by Linux command
# epstopdf input.eps

# add axes to draw
# /vis/scene/add/axes [x0] [y0] [z0] [length] [unit] [colour-string] [showtext]

# Draws axes at (x0, y0, z0) of given length and colour
# If "colour-string" is "auto", x, y and z will be red, green and blue 
# respectively. Otherwise it can be one of the pre-defined text-specified 
# colours - see information printed by the vis manager at start-up or use "/vis/list".
# If "length" is negative, it is set to about 25% of scene extent.
# If "showtext" is false, annotations are suppressed.

# To delete the axes, just run
#   /vis/drawVolume

# set background color
# /vis/viewer/set/background [red_or_string] [green] [blue] [opacity]

# Use ! to skip parameter setting?

# set light direction
# /vis/viewer/set/lightsVector  [x] [y] [z]
# usually set this to viewpointVector to avoid shadow

# Or set Lights move with camera or with object
# /vis/viewer/set/lightsMove [lightsMove]
# Parameter candidates : cam camera with-camera obj object with-object


# reset to the default
# /vis/viewer/reset

# source particle visualization
# /vis/scene/add/trajectories

# /vis/scene/endOfEventAction [action] [maxNumber]
# Accumulate or refresh the viewer for each new event.
# "accumulate": viewer accumulates hits, etc., event by event, or
# "refresh": viewer shows them at end of event or, for direct-screen viewers, 
# refreshes the screen just before drawing the next event.

